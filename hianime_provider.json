{
  "id": "hianime",
  "name": "HiAnime",
  "description": "HiAnime is an online streaming provider for subbed and dubbed anime in English. It uses the Aniwatch API proxy backend (aniwatch-api-2-0.vercel.app) to access HiAnime.to content.",
  "manifestURI": "https://raw.githubusercontent.com/Brokenest/hianime/refs/heads/main/hianime_provider.json",
  "version": "1.0.0",
  "author": "yourusername",
  "type": "onlinestream-provider",
  "language": "typescript",
  "lang": "en",
  "payload": "class Provider {\n  api: string = 'https://aniwatch-api-2-0.vercel.app';\n  baseUrl: string = 'https://hianime.to';\n  headers = {\n    'Referer': 'https://hianime.to',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'\n  };\n\n  getSettings(): Settings {\n    return {\n      episodeServers: ['hianime'],\n      supportsDub: true\n    };\n  }\n\n  async search(query: SearchOptions): Promise<SearchResult[]> {\n    const q = query.query.trim();\n    const url = `${this.api}/search?query=${encodeURIComponent(q)}`;\n    const res = await _makeRequest(url, this.headers);\n    const { success, data } = JSON.parse(res);\n    if (!success) throw new Error('Search failed');\n\n    return data.map((item: any) => ({\n      id: `${item.id}/${query.dub ? 'dub' : 'sub'}`,\n      title: item.title,\n      url: `${this.baseUrl}/anime/${item.id}`,\n      subOrDub: query.dub ? 'dub' : 'sub'\n    }));\n  }\n\n  async findEpisodes(id: string): Promise<EpisodeDetails[]> {\n    const animeId = id.split('/')[0];\n    const subOrDub = id.includes('/dub') ? 'dub' : 'sub';\n    const url = `${this.api}/anime/${animeId}/episodes`;\n    const res = await _makeRequest(url, this.headers);\n    const { success, data } = JSON.parse(res);\n    if (!success) throw new Error('Episode fetch failed');\n\n    return data.map((ep: any) => ({\n      id: ep.id.toString(),\n      number: ep.number,\n      url: JSON.stringify({ animeId, episodeId: ep.id, dubRequested: subOrDub === 'dub' })\n    }));\n  }\n\n  async findEpisodeServer(ep: EpisodeDetails, _server: string): Promise<EpisodeServer> {\n    const { animeId, episodeId, dubRequested } = JSON.parse(ep.url);\n    const url = `${this.api}/anime/${animeId}/episodes/${episodeId}/sources?type=${dubRequested ? 'dub' : 'sub'}&server=gogocdn`;\n    const res = await _makeRequest(url, this.headers);\n    const { success, data } = JSON.parse(res);\n    if (!success) throw new Error('Source load failed');\n\n    const videoSources = data.sources.map((src: any) => ({\n      url: src.url,\n      type: src.url.includes('.m3u8') ? 'm3u8' : 'mp4',\n      quality: src.quality,\n      subtitles: src.subtitles || []\n    }));\n\n    return {\n      headers: this.headers,\n      server: 'hianime',\n      videoSources\n    };\n  }\n}\n\nasync function _makeRequest(url: string, headers: any): Promise<string> {\n  const res = await fetch(url, { method: 'GET', headers });\n  if (!res.ok) throw new Error('Network error');\n  return await res.text();\n}"
}
